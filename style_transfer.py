# -*- coding: utf-8 -*-
"""Style Transfer

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_ocAqVDmcL_5yCjArR4TndEiZh8HH-a1
"""

import os
import sys
import scipy.io
import scipy.misc
import matplotlib.pyplot as plt
from matplotlib.pyplot import imshow
from PIL import Image
import numpy as np
#import tensorflow as tf
# Just do the whole exercise in compat mode
import tensorflow.compat.v1 as tf
import pprint
print("TF Version: ", tf.__version__)
print("Eager mode enabled: ", tf.executing_eagerly())
print("GPU available: ", tf.test.is_gpu_available())

# Cost routines
def compute_content_cost(a_C, a_G):

    m, n_H, n_W, n_C = a_G.get_shape().as_list()
    a_C_unrolled = tf.reshape(a_C, shape=[m, -1, n_C])
    a_G_unrolled = tf.reshape(a_G, shape=[m, -1, n_C])
    J_content = tf.reduce_sum(tf.square(a_C - a_G))/(4 * n_H * n_W * n_C)
    return J_content

def compute_layer_style_cost(a_S, a_G):

    m, n_H, n_W, n_C = a_G.get_shape().as_list()
    a_S = tf.transpose(tf.reshape(a_S, shape=[-1, n_C]),perm=[1,0])
    a_G = tf.transpose(tf.reshape(a_G, shape=[-1, n_C]),perm=[1,0])
    GS = tf.matmul(A,tf.transpose(a_S))
    GG = tf.matmul(A,tf.transpose(a_G))
    J_style_layer = tf.reduce_sum(tf.square(GS-GG))/(2 * n_C * n_H * n_W)**2
    return J_style_layer

def compute_style_cost(model, STYLE_LAYERS):

    J_style = 0
    for layer_name, coeff in STYLE_LAYERS:
        out = model[layer_name]
        a_S = sess.run(out)
        a_G = out
        # Compute style_cost for the current layer
        J_style_layer = compute_layer_style_cost(a_S, a_G)
        J_style += coeff * J_style_layer
    return J_style

# Load data - image files must be 224 x 224 x 3 
content_image = Image.open("F:\\Mark Co\\Marketing\\Photos\\Headshotx224.jpg")
fig = plt.figure()
fig.add_subplot(1, 3, 1)
plt.imshow(content_image)
content_array = np.array(content_image)
style_image = Image.open("F:\\Mark Co\\Marketing\\Photos\\Van Gogh.jpg")
fig.add_subplot(1, 3, 2)
plt.imshow(style_image)
style_array = np.array(style_image)
print(content_array.shape)
random_array = np.random.random_sample(content_array.shape) * 255
random_array = random_array.astype(np.uint8)
random_image = Image.fromarray(random_array)
fig.add_subplot(1, 3, 3)
plt.imshow(random_image)
plt.show()

# Load pre-trained VGG model
model = tf.keras.applications.VGG19(
    include_top=False, weights='imagenet', input_tensor=None, input_shape=None,
    pooling=None, classifier_activation='softmax'
)
model.summary()
sess = tf.InteractiveSession()

# Hyperparameters
alpha = 0.20 # Cost weight for content 
num_iterations = 200
STYLE_LAYERS = [ # Weights for style-layer cost function
    ('block1_conv1', 0.2),
    ('block2_conv1', 0.2),
    ('block3_conv1', 0.2),
    ('block4_conv1', 0.2),
    ('block5_conv1', 0.2)]
content_layer = 'block4_conv2' # Layer to use for content cost

# (Re)Initialize cost function - every time hparms change 
sess.run(model.layers[0].assign(content_array))
out = model[content_layer] 
a_C = sess.run(out)
a_G = out
J_content = compute_content_cost(a_C, a_G)

sess.run(model['input_8'].assign(style_array))
J_style = compute_style_cost(model, STYLE_LAYERS)

J = alpha * J_content + (1-alpha) * J_style

# Run the model
optimizer = tf.train.AdamOptimizer(2.0)
train_step = optimizer.minimize(J)
sess.run(tf.global_variables_initializer())
sess.run(model["input"].assign(input_image))
for i in range(num_iterations):
    sess.run(train_step)
    generated_image = sess.run(model["input"])
    if i%20 == 0:
            Jt, Jc, Js = sess.run([J, J_content, J_style])
            print("Iteration " + str(i) + " :")
            print("total cost = " + str(Jt))
            print("content cost = " + str(Jc))
            print("style cost = " + str(Js))
            save_image("output/" + str(i) + ".png", generated_image)
    save_image('output/generated_image.jpg', generated_image)